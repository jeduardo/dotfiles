#!/usr/bin/env python3

# based on cb-exit used in CrunchBang Linux <http://crunchbanglinux.org/>
# Copied from https://pastebin.com/raw/CbTsNMVF and modified to use systemctl
# and properly lock the screen before suspend.

# Python3 GTK reference at https://python-gtk-3-tutorial.readthedocs.io/en/latest/

import gi
gi.require_version("Gtk", "3.0")
import os
import getpass

from gi.repository import Gtk

class i3_exit:
    def disable_buttons(self):
        self.cancel.set_sensitive(False)
        self.logout.set_sensitive(False)
        self.suspend.set_sensitive(False)
        self.reboot.set_sensitive(False)
        self.shutdown.set_sensitive(False)

    def cancel_action(self,btn):
        self.disable_buttons()
        Gtk.main_quit()

    def logout_action(self,btn):
        self.disable_buttons()
        self.status.set_label("Exiting i3, please standby...")
        os.system("i3-msg exit")

    def suspend_action(self,btn):
        self.disable_buttons()
        self.status.set_label("Suspending, please standby...")
        os.system("~/apps/i3lock-fancy/lock")
        os.system("systemctl suspend")
        Gtk.main_quit()

    def reboot_action(self,btn):
        self.disable_buttons()
        self.status.set_label("Rebooting, please standby...")
        os.system("systemctl reboot")

    def shutdown_action(self,btn):
        self.disable_buttons()
        self.status.set_label("Shutting down, please standby...")
        os.system("systemctl poweroff")

    def create_window(self):
        self.window = Gtk.Window()
        title = "Log out " + getpass.getuser() + "? Choose an option:"
        self.window.set_title(title)
        self.window.set_border_width(5)
        self.window.set_size_request(500, 80)
        self.window.set_resizable(False)
        self.window.set_keep_above(True)
        self.window.stick
        self.window.set_position(1)
        self.window.connect("delete_event", Gtk.main_quit)
        windowicon = self.window.render_icon(Gtk.STOCK_QUIT, Gtk.IconSize.MENU)
        self.window.set_icon(windowicon)

        #Create HBox for buttons
        self.button_box = Gtk.HBox()
        self.button_box.show()

        #Cancel button
        self.cancel = Gtk.Button(stock = Gtk.STOCK_CANCEL)
        self.cancel.set_border_width(4)
        self.cancel.connect("clicked", self.cancel_action)
        self.button_box.pack_start(self.cancel, True, True, 0)
        self.cancel.show()

        #Logout button
        self.logout = Gtk.Button.new_with_mnemonic("_Log out")
        self.logout.set_border_width(4)
        self.logout.connect("clicked", self.logout_action)
        self.button_box.pack_start(self.logout, True, True, 0)
        self.logout.show()

        #Suspend button
        self.suspend = Gtk.Button.new_with_mnemonic("_Suspend")
        self.suspend.set_border_width(4)
        self.suspend.connect("clicked", self.suspend_action)
        self.button_box.pack_start(self.suspend, True, True, 0)
        self.suspend.show()

        #Reboot button
        self.reboot = Gtk.Button.new_with_mnemonic("_Reboot")
        self.reboot.set_border_width(4)
        self.reboot.connect("clicked", self.reboot_action)
        self.button_box.pack_start(self.reboot, True, True, 0)
        self.reboot.show()

        #Shutdown button
        self.shutdown = Gtk.Button.new_with_mnemonic("_Power off")
        self.shutdown.set_border_width(4)
        self.shutdown.connect("clicked", self.shutdown_action)
        self.button_box.pack_start(self.shutdown, True, True, 0)
        self.shutdown.show()

        #Create HBox for status label
        self.label_box = Gtk.HBox()
        self.label_box.show()
        self.status = Gtk.Label()
        self.status.show()
        self.label_box.pack_start(self.status, True, True, 0)

        #Create VBox and pack the above HBox's
        self.vbox = Gtk.VBox()
        self.vbox.pack_start(self.button_box, True, True, 0)
        self.vbox.pack_start(self.label_box, True, True, 0)
        self.vbox.show()

        self.window.add(self.vbox)
        self.window.show()

    def __init__(self):
        self.create_window()


def main():
    Gtk.main()

if __name__ == "__main__":
    go = i3_exit()
    main()
