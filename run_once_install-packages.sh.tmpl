#!/bin/bash

set -u # Fail on undefined variable

# Common functions

# Function to read multiline command output into an array
function read_array_from_command() {
  local cmd="$1"
  local array=()
  while IFS= read -r line; do
    array+=("$line")
  done < <(eval "$cmd")
  echo "${array[@]}" # Return the array as a space-separated string
}

{{ if eq .chezmoi.os "linux" -}}

# Function to detect Linux distribution
function detect_linux_distro() {
  if [[ -f /etc/os-release ]]; then
    source /etc/os-release
    echo "$ID"
  elif [[ -d "/data/data/com.termux/files/usr" ]] || [[ -n "$TERMUX_VERSION" ]]; then
    echo "android"
  else
    echo "unknown"
  fi
}

function install_android_packages() {
  PACKAGES="git clang gettext htop make openssl-tool neovim tmux"

  INSTALLED=($(read_array_from_command "pkg list-installed | grep -v automatic | sed 's|/.*||'"))

  for pkg in $PACKAGES; do
    if ! contains_string "$pkg" "${INSTALLED[@]}"; then
      pkg install -y $pkg
    fi
  done

}

# Install packages
distro=$(detect_linux_distro)
case "$distro" in
debian | ubuntu)
  echo TODO
  ;;
fedora)
  echo TODO
  ;;
android)
  install_android_packages
  ;;
*)
  echo "Unsupported Linux distribution: $distro"
  exit 1
  ;;
esac

{{ else if eq .chezmoi.os "darwin" -}}

function contains_string() {
  local search_string="$1"
  shift              # Shift past the first argument (the search string)
  local array=("$@") # The rest of the arguments are the array elements

  for element in "${array[@]}"; do
    if [[ "$element" == "$search_string" ]]; then
      return 0 # String found, return success
    fi
  done
  return 1 # String not found, return failure
}

# Define taps to be added
# This is the cask for browserpass
taps="amar1729/formulae"

# Define software to be installed
cli="direnv fd ffmpeg htop huggingface-cli imagemagick jq iproute2mac lazygit most nano neovim pass pinentry-mac pwgen ripgrep tmux virtualenvwrapper wezterm yq"
# node will provide npm with it
dev="corretto drawio node python@3.11 visual-studio-code"
fonts=($(read_array_from_command "brew search powerline | grep font | sort"))
sys="google-drive monitorcontrol"
misc="brave-browser browserpass calibre cursor joplin stats spotify zoom yubico-yubikey-manager"
casks="iina paintbrush syncthing"
# NOTE: I wanted to have steam as a cask but the cask is x86_64 only.

# Install Homebrew if absent
if ! command -v brew &>/dev/null; then
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# Collect installed packages
installed=($(read_array_from_command "brew list"))
# Collect configured taps
configured_taps=($(read_array_from_command "brew tap"))

# Configure app taps
for tap in $taps; do
  if ! contains_string "$tap" "${configured_taps[@]}"; then
    brew tap $tap
  fi
done

# Install all Homebrew software
all="$cli $dev $fonts $sys $misc"
for pkg in $all; do
  if ! contains_string "$pkg" "${installed[@]}"; then
    brew install $pkg
  fi
done

# Install all Homebrew casks
for pkg in $casks; do
  if ! contains_string "$pkg" "${installed[@]}"; then
    brew install --cask $pkg
  fi
done

# browserpass setup
PREFIX='/opt/homebrew/opt/browserpass' make hosts-brave-user -f '/opt/homebrew/opt/browserpass/lib/browserpass/Makefile'
PREFIX='/opt/homebrew/opt/browserpass' make hosts-firefox-user -f '/opt/homebrew/opt/browserpass/lib/browserpass/Makefile'

# tmux setup
TMUX_PLUGIN_DIR="$HOME/.tmux/plugins"
if [[ ! -d "$TMUX_PLUGIN_DIR" ]]; then
  mkdir -p "$TMUX_PLUGIN_DIR"
  git clone https://github.com/tmux-plugins/tpm "$TMUX_PLUGIN_DIR/tpm"
fi

# aws cli setup
AWS_DIR="$HOME/.aws"
if [[ ! -d "$AWS_DIR" ]]; then
  mkdir -p "$AWS_DIR"
  # Create the AWS helper script
  cat <<EOF >"$AWS_DIR/aws-pass-helper.sh"
#!/bin/bash
BASE_PATH=hosting/aws.amazon.com
AWS_PROFILE=\${AWS_PROFILE:-default}
ACCESS_KEY_ID=\$(pass \$BASE_PATH/\$AWS_PROFILE/access_key_id)
SECRET_ACCESS_KEY=\$(pass \$BASE_PATH/\$AWS_PROFILE/secret_access_key)

if [[ -z "\$ACCESS_KEY_ID" || -z "\$SECRET_ACCESS_KEY" ]]; then
  echo "Error: Missing AWS credentials for profile \$AWS_PROFILE" >&2
  exit 1
fi

cat <<JSON
{
  "Version": 1,
  "AccessKeyId": "\$ACCESS_KEY_ID",
  "SecretAccessKey": "\$SECRET_ACCESS_KEY"
}
JSON
EOF
  chmod +x "$AWS_DIR/aws-pass-helper.sh"

  # Configure AWS profiles
  cat <<EOF >"$AWS_DIR/config"
[profile blorgh/jeduardo]
region = eu-central-1
credential_process = $AWS_DIR/aws-pass-helper.sh
EOF
fi

# rustup install
if ! command -v cargo &>/dev/null; then
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
fi

{{ end -}}
